generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String       @id @default(uuid())
  name              String
  email             String       @unique
  password          String
  hourlyRate        Int
  role              UserRole     @default(USER)
  status            UserStatus   @default(ACTIVE)
  passwordChangedAt DateTime?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  session           Session[]
  Time_Sheet        Time_Sheet[]

  @@map("users")
}

model Individual {
  id        String   @id @default(uuid())
  name      String
  phone     String
  email     String   @unique
  gender    Gender
  address   String
  city      String
  state     String
  zip       String
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rosters   Roster[]

  @@map("individuals")
}

model Weekend {
  id          String   @id @default(uuid())
  weekendNo   String
  description String?
  layDirector String
  dateBegin   DateTime
  dateEnd     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  rosters     Roster[]

  @@map("weekends")
}

model Role {
  id           String   @id @default(uuid())
  name         String
  abbreviation String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  rosters      Roster[]

  @@map("roles")
}

model Roster {
  id           String     @id @default(uuid())
  individualId String
  weekendId    String?
  roleId       String?
  individual   Individual @relation(fields: [individualId], references: [id], onDelete: Cascade)
  weekend      Weekend?   @relation(fields: [weekendId], references: [id])
  role         Role?      @relation(fields: [roleId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("rosters")
}

model Time_Sheet {
  id               String   @id @default(uuid())
  name             String
  date             DateTime
  tripId           String
  tripStartTime    DateTime
  tripEndTime      DateTime
  duration         String
  durationInNumber Decimal
  payment          Decimal
  tripReceipt      String?
  memo             String?
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("time_sheets")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  device    String
  browser   String
  city      String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

enum Gender {
  Men
  Women
}

enum UserRole {
  ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  BLOCKED
}
